set nocompatible

" set up termdebug
set mouse=a
packadd termdebug

nmap <Leader>db :Termdebug<CR><C-w>L
nmap <Leader>edb :!kill -9 $(ps aux <bar> grep "gdb" <bar> tail -1 <bar> awk '{print $2}') <cr>


" The following is an outdated binding. The new way I have resolved the issue is
" using gdb --HEAD from Homebrew

" calls Termdebug and kills gdb, then calls Termdebug again. There was some
" weird bug with gdb silently starting a process that this addresses
" nnoremap <Leader>db :Termdebug<CR><C-w><C-p>:!kill -9 $(ps aux <bar> grep "gdb" <bar> awk '{print $2}' <bar> tail -1)<CR><CR>:call timer_start(1, {tid -> execute('Termdebug')})<CR><C-w><C-p>quit<CR>

" fix Termdebug and vim-tmux-navigator
" see christoomey/vim-tmux-navigator/issues/239
if exists(':tnoremap')
 tnoremap <silent> <c-h> <c-w>:TmuxNavigateLeft<cr>
 tnoremap <silent> <c-j> <c-w>:TmuxNavigateDown<cr>
 tnoremap <silent> <c-k> <c-w>:TmuxNavigateUp<cr>
 tnoremap <silent> <c-l> <c-w>:TmuxNavigateRight<cr>
 tnoremap <silent> <c-\> <c-w>:TmuxNavigatePrevious<cr>
endif

" toggle normal mode without leaving home row
imap ii <Esc>

" relative numbers
set number relativenumber
if has("autocmd")
    filetype indent plugin on
    augroup numbertoggle
        autocmd!
        autocmd BufEnter,FocusGained,InsertLeave * set relativenumber
        autocmd BufLeave,FocusLost,InsertEnter   * set norelativenumber
    augroup END
endif

" open markdown files with Chrome
autocmd BufEnter *.md exe 'noremap <F5> :! /Applications/Google\ Chrome.app/Contents/MacOS/Google\ Chrome %:p<CR>'

" arduino mappings
nmap <Leader>au :make upload<CR>
nmap <Leader>am :VtrSendCommandToRunner!<CR>make monitor<CR>

let g:rails_projections = {
  \    "app/javascript/*.js": {
  \      "command": "pack"
  \    },
  \    "app/javascript/*.scss": {
  \      "command": "pack"
  \    }     
  \ }


" vimtex settings
" see https://castel.dev/post/lecture-notes-1/
let g:tex_flavor='latex'
let g:vimtex_view_method='skim'
let g:vimtex_quickfix_mode=0
set conceallevel=1
let g:tex_conceal='abdmg'
let g:vimtex_compiler_latexmk = {
    \ 'options' : [
    \   '-pdf',
    \   '-shell-escape',
    \   '-verbose',
    \   '-file-line-error',
    \   '-synctex=1',
    \   '-interaction=nonstopmode',
    \ ],
    \}

" allow project specific vimrc files (with secure mode enabled)
set exrc
set secure

let g:ale_cpp_ccls_init_options = {
      \   'clang': {
      \       'extraArgs': [
      \         '-isystem/usr/local/include',
      \         '-isystem/Library/Developer/CommandLineTools/usr/bin/../include/c++/v1',
      \         '-isystem/Library/Developer/CommandLineTools/usr/lib/clang/11.0.0/include',
      \         '-isystem/Library/Developer/CommandLineTools/usr/include',
      \         '-isystem/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include',
      \         '-isystem/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/System/Library/Frameworks' 
      \             ],
      \       'resourceDir': '/Library/Developer/CommandLineTools/usr/lib/clang/11.0.0'
      \   }
      \ }

