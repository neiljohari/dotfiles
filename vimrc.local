" use gruvbox colorscheme
set termguicolors

let &t_8f = "\<Esc>[38;2;%lu;%lu;%lum"
let &t_8b = "\<Esc>[48;2;%lu;%lu;%lum"

let g:gruvbox_contrast_dark = 'hard'
colorscheme gruvbox

set nocompatible

let g:vimspector_enable_mappings = 'HUMAN'
" packadd! vimspector

" set up termdebug
set mouse=a
packadd termdebug

nmap <Leader>db :Termdebug<CR><C-w>L
nmap <Leader>edb :!kill -9 $(ps aux <bar> grep "gdb" <bar> tail -1 <bar> awk '{print $2}') <cr>


" The following is an outdated binding. The new way I have resolved the issue is
" using gdb --HEAD from Homebrew

" calls Termdebug and kills gdb, then calls Termdebug again. There was some
" weird bug with gdb silently starting a process that this addresses
" nnoremap <Leader>db :Termdebug<CR><C-w><C-p>:!kill -9 $(ps aux <bar> grep "gdb" <bar> awk '{print $2}' <bar> tail -1)<CR><CR>:call timer_start(1, {tid -> execute('Termdebug')})<CR><C-w><C-p>quit<CR>

" fix Termdebug and vim-tmux-navigator
" see christoomey/vim-tmux-navigator/issues/239
if exists(':tnoremap')
 tnoremap <silent> <c-h> <c-w>:TmuxNavigateLeft<cr>
 tnoremap <silent> <c-j> <c-w>:TmuxNavigateDown<cr>
 tnoremap <silent> <c-k> <c-w>:TmuxNavigateUp<cr>
 tnoremap <silent> <c-l> <c-w>:TmuxNavigateRight<cr>
 tnoremap <silent> <c-\> <c-w>:TmuxNavigatePrevious<cr>
endif

" don't make a newline a comment by default
autocmd BufNewFile,BufRead * setlocal formatoptions-=cro

" toggle normal mode without leaving home row
imap ii <Esc>

" relative numbers
set number relativenumber
if has("autocmd")
    filetype indent plugin on
    augroup numbertoggle
        autocmd!
        autocmd BufEnter,FocusGained,InsertLeave * set relativenumber
        autocmd BufLeave,FocusLost,InsertEnter   * set norelativenumber
    augroup END
endif

" open markdown files with Chrome
autocmd BufEnter *.md exe 'noremap <F5> :! /Applications/Google\ Chrome.app/Contents/MacOS/Google\ Chrome %:p<CR>'

" arduino mappings
nmap <Leader>au :make upload<CR>
nmap <Leader>am :VtrSendCommandToRunner!<CR>make monitor<CR>

let g:rails_projections = {
  \    "app/javascript/*.js": {
  \      "command": "pack"
  \    },
  \    "app/javascript/*.scss": {
  \      "command": "pack"
  \    }     
  \ }


" vimtex settings
" see https://castel.dev/post/lecture-notes-1/
let g:tex_flavor='latex'
let g:vimtex_quickfix_mode=0
set conceallevel=1
let g:tex_conceal='abdmg'
let g:vimtex_compiler_latexmk = {
    \ 'options' : [
    \   '-pdf',
    \   '-shell-escape',
    \   '-verbose',
    \   '-file-line-error',
    \   '-synctex=1',
    \   '-interaction=nonstopmode',
    \ ],
    \}

" allow project specific vimrc files (with secure mode enabled)
set exrc
set secure

" set ALE to use ccls server (provide proper include paths)
let ccls_init_options = {
      \   'clang': {
      \       'extraArgs': [
      \         '-isystem/usr/local/include',
      \         '-isystem/Library/Developer/CommandLineTools/usr/bin/../include/c++/v1',
      \         '-isystem/Library/Developer/CommandLineTools/usr/lib/clang/11.0.0/include',
      \         '-isystem/Library/Developer/CommandLineTools/usr/include',
      \         '-isystem/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include',
      \         '-isystem/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/System/Library/Frameworks' 
      \             ],
      \       'resourceDir': '/Library/Developer/CommandLineTools/usr/lib/clang/11.0.0'
      \   }
      \ }


let g:ale_cpp_ccls_init_options = ccls_init_options
let g:ale_c_ccls_init_options = ccls_init_options

" BEGIN coc.nvim config
" TextEdit might fail if hidden is not set.
set hidden

" Some servers have issues with backup files, see #649.
set nobackup
set nowritebackup

" Give more space for displaying messages.
set cmdheight=2

" Having longer updatetime (default is 4000 ms = 4 s) leads to noticeable
" delays and poor user experience.
set updatetime=300

" Don't pass messages to |ins-completion-menu|.
set shortmess+=c

" Always show the signcolumn, otherwise it would shift the text each time
" diagnostics appear/become resolved.
set signcolumn=yes

" Use <c-space> to trigger completion.
inoremap <silent><expr> <c-space> coc#refresh()

" Use `[g` and `]g` to navigate diagnostics
nmap <silent> [g <Plug>(coc-diagnostic-prev)
nmap <silent> ]g <Plug>(coc-diagnostic-next)

" GoTo code navigation.
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)

" Use K to show documentation in preview window.
nnoremap <silent> K :call <SID>show_documentation()<CR>

function! s:show_documentation()
  if (index(['vim','help'], &filetype) >= 0)
    execute 'h '.expand('<cword>')
  else
    call CocAction('doHover')
  endif
endfunction


" Highlight the symbol and its references when holding the cursor.
autocmd CursorHold * silent call CocActionAsync('highlight')

" Symbol renaming.
nmap <leader>rn <Plug>(coc-rename)

" Formatting selected code.
xmap <leader>f  <Plug>(coc-format-selected)
nmap <leader>f  <Plug>(coc-format-selected)

augroup mygroup
  autocmd!
  " Setup formatexpr specified filetype(s).
  autocmd FileType typescript,json setl formatexpr=CocAction('formatSelected')
  " Update signature help on jump placeholder.
  autocmd User CocJumpPlaceholder call CocActionAsync('showSignatureHelp')
augroup end

" Applying codeAction to the selected region.
" Example: `<leader>aap` for current paragraph
xmap <leader>a  <Plug>(coc-codeaction-selected)
nmap <leader>a  <Plug>(coc-codeaction-selected)

" Remap keys for applying codeAction to the current line.
nmap <leader>ac  <Plug>(coc-codeaction)
" Apply AutoFix to problem on the current line.
nmap <leader>qf  <Plug>(coc-fix-current)

" Introduce function text object
" NOTE: Requires 'textDocument.documentSymbol' support from the language server.
xmap if <Plug>(coc-funcobj-i)
xmap af <Plug>(coc-funcobj-a)
omap if <Plug>(coc-funcobj-i)
omap af <Plug>(coc-funcobj-a)

" Use <TAB> for selections ranges.
" NOTE: Requires 'textDocument/selectionRange' support from the language server.
" coc-tsserver, coc-python are the examples of servers that support it.
nmap <silent> <TAB> <Plug>(coc-range-select)
xmap <silent> <TAB> <Plug>(coc-range-select)

" Add `:Format` command to format current buffer.
command! -nargs=0 Format :call CocAction('format')

" Add `:Fold` command to fold current buffer.
command! -nargs=? Fold :call     CocAction('fold', <f-args>)

" Add `:OR` command for organize imports of the current buffer.
command! -nargs=0 OR   :call     CocAction('runCommand', 'editor.action.organizeImport')

" Mappings using CoCList:
" Show all diagnostics.
nnoremap <silent> <space>a  :<C-u>CocList diagnostics<cr>
" Manage extensions.
nnoremap <silent> <space>e  :<C-u>CocList extensions<cr>
" Show commands.
nnoremap <silent> <space>c  :<C-u>CocList commands<cr>
" Find symbol of current document.
nnoremap <silent> <space>o  :<C-u>CocList outline<cr>
" Search workspace symbols.
nnoremap <silent> <space>s  :<C-u>CocList -I symbols<cr>
" Do default action for next item.
nnoremap <silent> <space>j  :<C-u>CocNext<CR>
" Do default action for previous item.
nnoremap <silent> <space>k  :<C-u>CocPrev<CR>
" Resume latest coc list.
nnoremap <silent> <space>p  :<C-u>CocListResume<CR>

let g:lightline = {
      \ 'colorscheme': 'wombat',
      \ 'active': {
      \   'left': [ [ 'mode', 'paste' ],
      \             [ 'cocstatus', 'readonly', 'filename', 'modified' ] ]
      \ },
      \ 'component_function': {
      \   'cocstatus': 'coc#status'
      \ },
      \ }

" Use auocmd to force lightline update.
autocmd User CocStatusChange,CocDiagnosticChange call lightline#update()

" END coc.nvim config

set redrawtime=10000
